/*
 * This file is generated by jOOQ.
 */
package com.tvlk.karate.db.tables;


import com.tvlk.karate.db.Indexes;
import com.tvlk.karate.db.Karate;
import com.tvlk.karate.db.Keys;
import com.tvlk.karate.db.enums.PaymentOption;
import com.tvlk.karate.db.enums.PaymentStatus;
import com.tvlk.karate.db.enums.ProductType;
import com.tvlk.karate.db.tables.records.OrderRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Order extends TableImpl<OrderRecord> {

    private static final long serialVersionUID = 1990361814;

    /**
     * The reference instance of <code>karate.order</code>
     */
    public static final Order ORDER = new Order();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderRecord> getRecordType() {
        return OrderRecord.class;
    }

    /**
     * The column <code>karate.order.id</code>.
     */
    public final TableField<OrderRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('karate.order_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>karate.order.product_type</code>.
     */
    public final TableField<OrderRecord, ProductType> PRODUCT_TYPE = createField(DSL.name("product_type"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.tvlk.karate.db.enums.ProductType.class), this, "");

    /**
     * The column <code>karate.order.product_name</code>.
     */
    public final TableField<OrderRecord, String> PRODUCT_NAME = createField(DSL.name("product_name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>karate.order.product_desc</code>.
     */
    public final TableField<OrderRecord, String> PRODUCT_DESC = createField(DSL.name("product_desc"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>karate.order.payment_status</code>.
     */
    public final TableField<OrderRecord, PaymentStatus> PAYMENT_STATUS = createField(DSL.name("payment_status"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).defaultValue(org.jooq.impl.DSL.field("'PENDING'::karate.payment_status", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(com.tvlk.karate.db.enums.PaymentStatus.class), this, "");

    /**
     * The column <code>karate.order.payment_option</code>.
     */
    public final TableField<OrderRecord, PaymentOption> PAYMENT_OPTION = createField(DSL.name("payment_option"), org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(com.tvlk.karate.db.enums.PaymentOption.class), this, "");

    /**
     * The column <code>karate.order.created</code>.
     */
    public final TableField<OrderRecord, OffsetDateTime> CREATED = createField(DSL.name("created"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>karate.order.updated</code>.
     */
    public final TableField<OrderRecord, OffsetDateTime> UPDATED = createField(DSL.name("updated"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * Create a <code>karate.order</code> table reference
     */
    public Order() {
        this(DSL.name("order"), null);
    }

    /**
     * Create an aliased <code>karate.order</code> table reference
     */
    public Order(String alias) {
        this(DSL.name(alias), ORDER);
    }

    /**
     * Create an aliased <code>karate.order</code> table reference
     */
    public Order(Name alias) {
        this(alias, ORDER);
    }

    private Order(Name alias, Table<OrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Order(Name alias, Table<OrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Order(Table<O> child, ForeignKey<O, OrderRecord> key) {
        super(child, key, ORDER);
    }

    @Override
    public Schema getSchema() {
        return Karate.KARATE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORDER_PKEY);
    }

    @Override
    public Identity<OrderRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ORDER;
    }

    @Override
    public UniqueKey<OrderRecord> getPrimaryKey() {
        return Keys.ORDER_PKEY;
    }

    @Override
    public List<UniqueKey<OrderRecord>> getKeys() {
        return Arrays.<UniqueKey<OrderRecord>>asList(Keys.ORDER_PKEY);
    }

    @Override
    public Order as(String alias) {
        return new Order(DSL.name(alias), this);
    }

    @Override
    public Order as(Name alias) {
        return new Order(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(String name) {
        return new Order(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(Name name) {
        return new Order(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, ProductType, String, String, PaymentStatus, PaymentOption, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
