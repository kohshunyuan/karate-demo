/*
 * This file is generated by jOOQ.
 */
package com.tvlk.karate.db.tables;


import com.tvlk.karate.db.Indexes;
import com.tvlk.karate.db.Karate;
import com.tvlk.karate.db.Keys;
import com.tvlk.karate.db.enums.PaymentOption;
import com.tvlk.karate.db.tables.records.AvailablePaymentOptionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AvailablePaymentOption extends TableImpl<AvailablePaymentOptionRecord> {

    private static final long serialVersionUID = 1022812837;

    /**
     * The reference instance of <code>karate.available_payment_option</code>
     */
    public static final AvailablePaymentOption AVAILABLE_PAYMENT_OPTION = new AvailablePaymentOption();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AvailablePaymentOptionRecord> getRecordType() {
        return AvailablePaymentOptionRecord.class;
    }

    /**
     * The column <code>karate.available_payment_option.id</code>.
     */
    public final TableField<AvailablePaymentOptionRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('karate.available_payment_option_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>karate.available_payment_option.payment_option</code>.
     */
    public final TableField<AvailablePaymentOptionRecord, PaymentOption> PAYMENT_OPTION = createField(DSL.name("payment_option"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.tvlk.karate.db.enums.PaymentOption.class), this, "");

    /**
     * The column <code>karate.available_payment_option.active</code>.
     */
    public final TableField<AvailablePaymentOptionRecord, Boolean> ACTIVE = createField(DSL.name("active"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>karate.available_payment_option</code> table reference
     */
    public AvailablePaymentOption() {
        this(DSL.name("available_payment_option"), null);
    }

    /**
     * Create an aliased <code>karate.available_payment_option</code> table reference
     */
    public AvailablePaymentOption(String alias) {
        this(DSL.name(alias), AVAILABLE_PAYMENT_OPTION);
    }

    /**
     * Create an aliased <code>karate.available_payment_option</code> table reference
     */
    public AvailablePaymentOption(Name alias) {
        this(alias, AVAILABLE_PAYMENT_OPTION);
    }

    private AvailablePaymentOption(Name alias, Table<AvailablePaymentOptionRecord> aliased) {
        this(alias, aliased, null);
    }

    private AvailablePaymentOption(Name alias, Table<AvailablePaymentOptionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AvailablePaymentOption(Table<O> child, ForeignKey<O, AvailablePaymentOptionRecord> key) {
        super(child, key, AVAILABLE_PAYMENT_OPTION);
    }

    @Override
    public Schema getSchema() {
        return Karate.KARATE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AVAILABLE_PAYMENT_OPTION_PKEY);
    }

    @Override
    public Identity<AvailablePaymentOptionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_AVAILABLE_PAYMENT_OPTION;
    }

    @Override
    public UniqueKey<AvailablePaymentOptionRecord> getPrimaryKey() {
        return Keys.AVAILABLE_PAYMENT_OPTION_PKEY;
    }

    @Override
    public List<UniqueKey<AvailablePaymentOptionRecord>> getKeys() {
        return Arrays.<UniqueKey<AvailablePaymentOptionRecord>>asList(Keys.AVAILABLE_PAYMENT_OPTION_PKEY);
    }

    @Override
    public AvailablePaymentOption as(String alias) {
        return new AvailablePaymentOption(DSL.name(alias), this);
    }

    @Override
    public AvailablePaymentOption as(Name alias) {
        return new AvailablePaymentOption(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AvailablePaymentOption rename(String name) {
        return new AvailablePaymentOption(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AvailablePaymentOption rename(Name name) {
        return new AvailablePaymentOption(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, PaymentOption, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
