/*
 * This file is generated by jOOQ.
 */
package com.tvlk.karate.db.tables.records;


import com.tvlk.karate.db.enums.PaymentOption;
import com.tvlk.karate.db.tables.AvailablePaymentOption;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AvailablePaymentOptionRecord extends UpdatableRecordImpl<AvailablePaymentOptionRecord> implements Record3<Integer, PaymentOption, Boolean> {

    private static final long serialVersionUID = 585178254;

    /**
     * Setter for <code>karate.available_payment_option.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>karate.available_payment_option.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>karate.available_payment_option.payment_option</code>.
     */
    public void setPaymentOption(PaymentOption value) {
        set(1, value);
    }

    /**
     * Getter for <code>karate.available_payment_option.payment_option</code>.
     */
    public PaymentOption getPaymentOption() {
        return (PaymentOption) get(1);
    }

    /**
     * Setter for <code>karate.available_payment_option.active</code>.
     */
    public void setActive(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>karate.available_payment_option.active</code>.
     */
    public Boolean getActive() {
        return (Boolean) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, PaymentOption, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, PaymentOption, Boolean> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return AvailablePaymentOption.AVAILABLE_PAYMENT_OPTION.ID;
    }

    @Override
    public Field<PaymentOption> field2() {
        return AvailablePaymentOption.AVAILABLE_PAYMENT_OPTION.PAYMENT_OPTION;
    }

    @Override
    public Field<Boolean> field3() {
        return AvailablePaymentOption.AVAILABLE_PAYMENT_OPTION.ACTIVE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public PaymentOption component2() {
        return getPaymentOption();
    }

    @Override
    public Boolean component3() {
        return getActive();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public PaymentOption value2() {
        return getPaymentOption();
    }

    @Override
    public Boolean value3() {
        return getActive();
    }

    @Override
    public AvailablePaymentOptionRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public AvailablePaymentOptionRecord value2(PaymentOption value) {
        setPaymentOption(value);
        return this;
    }

    @Override
    public AvailablePaymentOptionRecord value3(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public AvailablePaymentOptionRecord values(Integer value1, PaymentOption value2, Boolean value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AvailablePaymentOptionRecord
     */
    public AvailablePaymentOptionRecord() {
        super(AvailablePaymentOption.AVAILABLE_PAYMENT_OPTION);
    }

    /**
     * Create a detached, initialised AvailablePaymentOptionRecord
     */
    public AvailablePaymentOptionRecord(Integer id, PaymentOption paymentOption, Boolean active) {
        super(AvailablePaymentOption.AVAILABLE_PAYMENT_OPTION);

        set(0, id);
        set(1, paymentOption);
        set(2, active);
    }
}
